(defun read-binary-file (path)
  (with-open-file (in path :element-type '(unsigned-byte 8))
    (let ((bin (make-array (file-length in) :element-type '(unsigned-byte 8))))
      (read-sequence bin in)
      bin)))

(defclass ttf-table ()
  ((sfnt-version :initform 0
		 :initarg :version
		 :accessor version)
   (num-tables :initform 0
	       :initarg :num-tables
	       :accessor num-tables)
   (search-range :initform 0
		 :initarg :search-range
		 :accessor search-range)
   (entry-selector :initform 0
		   :initarg :entry-selector
		   :accessor entry-selector)
   (range-shift :initform 0
		:initarg :range-shift
		:accessor range-shift)
   (table-record :initform '()
		 :initarg :tabel-record
		 :accessor table-record)))

(defmethod read-ttf (file-path (ttf-table ttf-table))
  ;;read ttf file
  (let ((binary (read-binary-file file-path)))
    (setf (version ttf-table) (ttf-version (subseq binary 0 4)))
    (setf (num-tables ttf-table) (ttf-num-tables (subseq binary 4 6)))
    (setf (entry-selector ttf-table)
	  (ttf-entry-selector (num-tables ttf-table)))
    (setf (search-range ttf-table)
	  (ttf-search-range (entry-selector ttf-table)))
    (setf (range-shift ttf-table)
	  (ttf-range-shift (num-tables ttf-table) (search-range ttf-table))))
  (format t "version:~a~%" (version ttf-table))
  (format t "numTables:~a~%" (num-tables ttf-table))
  (format t "searchRange:~a~%" (search-range ttf-table))
  (format t "entrySelector:~a~%" (entry-selector ttf-table))
  (format t "rangeShift:~a~%" (range-shift ttf-table)))

(defun ttf-version (binary)
  ;;read 4bytes
  (append (list (aref binary 0))
	  (list (aref binary 1))
	  (list (aref binary 2))
	  (list (aref binary 3))))
(defun ttf-num-tables (binary)
  ;;read 2bytes
  (+ (* (aref binary 0) 256) (aref binary 1)))
(defun ttf-search-range (entry-selector)
  ;;calc search-range
  (* 16 (ash 1 entry-selector)))
(defun ttf-entry-selector (num-tables)
  ;;calc entry-selector
  (multiple-value-bind (a)
      (floor (log num-tables 2))
    a))
(defun ttf-range-shift (num-tables search-range)
  (- (* 16 num-tables) search-range))

(defmethod get-table (binary (ttf-table ttf-table))
  (dotimes (i (num-tables ttf-table))
    (let ar (subseq binary (+ 12 (* 16 i)) 16)
	 (append 
	  (ttf-record-tag (subseq ar 0 4) ttf-table)
	  ;;(ttf-record-checksum (subseq ar 4 8) ttf-table)
	  (ttf-record-offset (subseq ar 8 12) ttf-table)
	  (ttf-record-length (subseq ar 12 16) ttf-table)))))

(defmethod ttf-record-tag (binary (ttf-table ttf-table))
  (cond ((and (eql #x46 (aref binary 0))
	      (eql #x46 (aref binary 1))
	      (eql #x54 (aref binary 2))
	      (eql #x4d (aref binary 3)))
	 "FFTM")
	((and (eql #x47 (aref binary 0))
	      (eql #x44 (aref binary 1))
	      (eql #x45 (aref binary 2))
	      (eql #x46 (aref binary 3)))
	 "GDEF")
	((and (eql #x47 (aref binary 0))
	      (eql #x50 (aref binary 1))
	      (eql #x4f (aref binary 2))
	      (eql #x53 (aref binary 3)))
	 "GPOS")
	((and (eql #x47 (aref binary 0))
	      (eql #x53 (aref binary 1))
	      (eql #x55 (aref binary 2))
	      (eql #x42 (aref binary 3)))
	 "GSUB")
	((and (eql #x4f (aref binary 0))
	      (eql #x53 (aref binary 1))
	      (eql #x2f (aref binary 2))
	      (eql #x32 (aref binary 3)))
	 "OS/2")
	((and (eql #x63 (aref binary 0))
	      (eql #x6d (aref binary 1))
	      (eql #x61 (aref binary 2))
	      (eql #x70 (aref binary 3)))
	 "cmap")
	((and (eql #x63 (aref binary 0))
	      (eql #x76 (aref binary 1))
	      (eql #x74 (aref binary 2))
	      (eql #x20 (aref binary 3)))
	 "cvt")
	((and (eql #x66 (aref binary 0))
	      (eql #x70 (aref binary 1))
	      (eql #x67 (aref binary 2))
	      (eql #x6d (aref binary 3)))
	 "fpgm")
	((and (eql #x67 (aref binary 0))
	      (eql #x61 (aref binary 1))
	      (eql #x73 (aref binary 2))
	      (eql #x70 (aref binary 3)))
	 "gasp")
	((and (eql #x67 (aref binary 0))
	      (eql #x6c (aref binary 1))
	      (eql #x79 (aref binary 2))
	      (eql #x66 (aref binary 3)))
	 "glyf")
	((and (eql #x68 (aref binary 0))
	      (eql #x65 (aref binary 1))
	      (eql #x61 (aref binary 2))
	      (eql #x64 (aref binary 3)))
	 "head")
	((and (eql #x68 (aref binary 0))
	      (eql #x68 (aref binary 1))
	      (eql #x65 (aref binary 2))
	      (eql #x61 (aref binary 3)))
	 "hhea")
	((and (eql #x68 (aref binary 0))
	      (eql #x6d (aref binary 1))
	      (eql #x74 (aref binary 2))
	      (eql #x78 (aref binary 3)))
	 "hmtx")
	((and (eql #x6c (aref binary 0))
	      (eql #x6f (aref binary 1))
	      (eql #x63 (aref binary 2))
	      (eql #x61 (aref binary 3)))
	 "loca")
	((and (eql #x6d (aref binary 0))
	      (eql #x61 (aref binary 1))
	      (eql #x78 (aref binary 2))
	      (eql #x70 (aref binary 3)))
	 "maxp")
	((and (eql #x6e (aref binary 0))
	      (eql #x61 (aref binary 1))
	      (eql #x6d (aref binary 2))
	      (eql #x65 (aref binary 3)))
	 "name")
	((and (eql #x70 (aref binary 0))
	      (eql #x6f (aref binary 1))
	      (eql #x73 (aref binary 2))
	      (eql #x74 (aref binary 3)))
	 "post")
	((and (eql #x70 (aref binary 0))
	      (eql #x72 (aref binary 1))
	      (eql #x65 (aref binary 2))
	      (eql #x70 (aref binary 3)))
	 "prep")
	((and (eql #x77 (aref binary 0))
	      (eql #x65 (aref binary 1))
	      (eql #x62 (aref binary 2))
	      (eql #x66 (aref binary 3)))
	 "webf")
	))

(defmethod ttf-record-checksum (binary (ttf-table ttf-table))
  )

(defmethod ttf-record-offset (binary (ttf-table ttf-table))
  )

(defmethod ttf-record-length (binary (ttf-table ttf-table))
  )
